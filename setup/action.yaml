name: Setup Nix + Tailscale
description: Setup Nix + Tailscale
inputs:
  tailscaleVersion:
    description: "Tailscale version"
    required: false
    default: 1.16.2
  tailscaleAuthKey:
    description: "Tailscale auth key"
    required: false
    default: ""
  nixBuildSshKey:
    description: "Nix build SSH key"
    required: false
    default: ""
  nixCacheS3AccessKeyId:
    description: "Nix cache S3 access key ID"
    required: true
  nixCacheS3SecretAccessKey:
    description: "Nix cache S3 secret access key"
    required: true
  nixBuilders:
    description: "Nix builders"
    required: false
    default: "ssh-ng://root@nix-aarch64-darwin.shopstic.org.github.beta.tailscale.net aarch64-darwin; ssh-ng://root@nix-x86-64-darwin.shopstic.org.github.beta.tailscale.net x86_64-darwin; ssh-ng://nix@nix-aarch64-linux.shopstic.org.github.beta.tailscale.net aarch64-linux; ssh-ng://nix@nix-x86-64-linux.shopstic.org.github.beta.tailscale.net x86_64-linux;"
runs:
  using: composite
  steps:
    - name: Derive substituters
      shell: bash
      id: derive_substituters
      if: inputs.tailscaleAuthKey != ''
      env:
        NIX_BUILDERS: ${{ inputs.nixBuilders }}
      run: |-
        SUBSTITUTERS=$(node -e "console.log(process.env.NIX_BUILDERS.split(';').map(b => b.trim()).filter(b => b.length > 0).map(b => b.split(' ')[0] + '?priority=100').join(' '))")
        echo "::set-output name=substituters::${SUBSTITUTERS}"

    - name: Install Nix
      uses: nixbuild/nix-quick-install-action@7f7c02d0018295abf3b3623edaaccbb1f133bb51
      with:
        nix_version: 2.4
        nix_conf: |
          substituters = https://nix.shopstic.com?priority=50 https://cache.nixos.org?priority=10 ${{ steps.derive_substituters.outputs.substituters }}
          trusted-public-keys = nix-cache:jxOpK2dQOv/7JIb5/30+W4oidtUgmFMXLc/3mC09mKM= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
          experimental-features = nix-command flakes
          builders = ${{ inputs.tailscaleAuthKey && inputs.nixBuilders }}
          builders-use-substitutes = true

    - name: Download Tailscale
      shell: bash
      env:
        VERSION: ${{ inputs.tailscaleVersion }}
      if: inputs.tailscaleAuthKey != ''
      run: |
        MINOR=$(echo "$VERSION" | awk -F '.' {'print $2'})
        if [ $((MINOR % 2)) -eq 0 ]; then
          URL="https://pkgs.tailscale.com/stable/tailscale_${VERSION}_amd64.tgz"
        else
          URL="https://pkgs.tailscale.com/unstable/tailscale_${VERSION}_amd64.tgz"
        fi
        curl "$URL" -o tailscale.tgz
        tar -C /tmp -xzf tailscale.tgz
        rm tailscale.tgz
        TSPATH=/tmp/tailscale_${VERSION}_amd64
        sudo mv "${TSPATH}/tailscale" "${TSPATH}/tailscaled" /usr/bin

    - name: Run Tailscale
      shell: bash
      env:
        TAILSCALE_AUTHKEY: ${{ inputs.tailscaleAuthKey }}
        REPO_NAME: ${{ github.repository }}
      if: inputs.tailscaleAuthKey != ''
      run: |
        sudo tailscaled 2>~/tailscaled.log &
        CLEANED_REPO_NAME=${REPO_NAME//\//-}
        HOSTNAME="${CLEANED_REPO_NAME}-$(cat /etc/hostname)"
        sudo tailscale up --authkey ${TAILSCALE_AUTHKEY} --hostname=${HOSTNAME} --accept-routes

    - name: Setup secrets
      shell: bash
      env:
        NIX_BUILD_SSH_KEY: ${{ inputs.nixBuildSshKey }}
        NIX_CACHE_S3_ACCESS_KEY_ID: ${{ inputs.nixCacheS3AccessKeyId }}
        NIX_CACHE_S3_SECRET_ACCESS_KEY: ${{ inputs.nixCacheS3SecretAccessKey }}
      run: |
        if [[ "${NIX_BUILD_SSH_KEY}" != "" ]]; then
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh

          cat <<EOF > ~/.ssh/config
        Host *
          AddKeysToAgent yes
          IdentitiesOnly yes
          IdentityFile ~/.ssh/nix-build
          StrictHostKeyChecking no
          LogLevel ERROR
        EOF

          printenv NIX_BUILD_SSH_KEY > ~/.ssh/nix-build
          chmod 0600 ~/.ssh/nix-build
        fi

        mkdir -p ~/.aws
        cat <<EOF > ~/.aws/credentials
        [nix-cache]
        aws_access_key_id = ${NIX_CACHE_S3_ACCESS_KEY_ID}
        aws_secret_access_key = ${NIX_CACHE_S3_SECRET_ACCESS_KEY}
        EOF
